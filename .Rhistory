q()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
sigmoid = function(x){
1 / (1+exp(-x))
}
plot(x, sigmoid(x), col='blue')
summary(cars)
sigmoid = function(x){
1 / (1+exp(-x))
}
x <- seq(-5, 5, 0.01)
plot(x, sigmoid(x), col='blue')
summary(cars)
sigmoid = function(x){
1 / (1+exp(-x))
}
x <- seq(-50, 50, 0.01)
plot(x, sigmoid(x), col='blue')
summary(cars)
sigmoid = function(x){
1 / (1+exp(-x))
}
x <- seq(-50, 50, 0.01)
plot(x, sigmoid(x), col='pink')
summary(cars)
sigmoid = function(x){
1 / (1+exp(-x))
}
x <- seq(-50, 50, 0.01)
plot(x, sigmoid(x), col='rainbow')
summary(cars)
sigmoid = function(x){
1 / (1+exp(-x))
}
x <- seq(-50, 50, 0.01)
plot(x, sigmoid(x), col='blue')
summary(cars)
sigmoid = function(x){
1 / (1+exp(-x))
}
x <- seq(-50, 50, 1)
plot(x, sigmoid(x), col='blue')
summary(cars)
sigmoid = function(x){
1 / (1+exp(-x))
}
x <- seq(-50, 50, .5)
plot(x, sigmoid(x), col='blue')
summary(cars)
sigmoid = function(x){
1 / (1+exp(-x))
}
x <- seq(-50, 50, .01)
plot(x, sigmoid(x), col='blue')
install.packages("gains")
install.packages("car")
install.packages("ROCR")
knitr::opts_chunk$set(echo = TRUE)
library(car)
vif(logit.reg)
knitr::opts_chunk$set(echo = TRUE)
loan.df <- read.csv("LoanApproval.csv")
head(loan.df)
# Check for missing values
sum(is.na(loan.df))
summary(loan.df)
set.seed(2)
# Split the data 80:20
train.sample <- sample(c(1:dim(loan.df)[1]), dim(loan.df)[1]*0.8)
train.df <- loan.df[train.sample,]
test.df <- loan.df[-train.sample,]
logit.reg <- glm(Approval ~ ., train.df, family="binomial")
options(scipen = 999)
summary(logit.reg)
logit.reg.pred <- predict(logit.reg, test.df[,-7], type="response")
# Compare first 20 actual vs predicted values
data.frame(actual = test.df$Approval[1:20], predicted = logit.reg.pred[1:20])
library(gains)
gain <- gains(test.df$Approval, logit.reg.pred, groups=length(logit.reg.pred))
# plot Lift chart
plot(c(0, gain$cume.pct.of.total*sum(test.df$Approval))~c(0,gain$cume.obs), xlab="# records", ylab = "Cumulative Gain", main="Gain and Lift Chart", type="l", col="blue")
lines(c(0, sum(test.df$Approval))~c(0, dim(test.df)[1]), col="red",
legend("topleft",c("With prediction","No Prediction"),fill=c("blue","red")))
library(car)
vif(logit.reg)
theFormula = Approval ~ Term + Income + FICO
logit.reg <- glm(formula = theFormula, train.df, family="binomial")
options(scipen = 999)
summary(logit.reg)
logit.reg.pred <- predict(logit.reg, test.df[,-7], type="response")
# Compare first 20 actual vs predicted values
data.frame(actual = test.df$Approval[1:20], predicted = logit.reg.pred[1:20])
library(gains)
gain <- gains(test.df$Approval, logit.reg.pred, groups=length(logit.reg.pred))
# plot Lift chart
plot(c(0, gain$cume.pct.of.total*sum(test.df$Approval))~c(0,gain$cume.obs), xlab="# records", ylab = "Cumulative Gain", main="Gain and Lift Chart", type="l", col="blue")
lines(c(0, sum(test.df$Approval))~c(0, dim(test.df)[1]), col="red",
legend("topleft",c("With prediction","No Prediction"),fill=c("blue","red")))
library(car)
vif(logit.reg)
logit.reg.prob <- predict(logit.reg, test.df, type="response" )
logit.reg.prob.df <- data.frame(logit.reg.prob)
# Extract only decisions made with a probability higher than 80%
approvals <- ifelse(logit.reg.prob.df > 0.8, 1, 0)
head(approvals, 20)
table(test.df$Approval, approvals)
classification.error <- mean(approvals != test.df$Approval)
classification.error
accuracy <- 1 - classification.error
accuracy
library(ROCR)
prob <- predict(logit.reg, newdata = test.df, type="response")
pred <- prediction(prob, test.df$Approval)
# Plot True Positive Rate (tpr) vs False Positive Rate (fpr)
pmf <- performance(pred, measure="tpr", xmeasure="fpr")
plot(pmf, col="red")
auc <- performance(pred, measure="auc")
auc <- auc@y.values[[1]]
auc
install.packages("caret")
table(test.df$Approval, approvals)
classification.error <- mean(approvals != test.df$Approval)
classification.error
accuracy <- 1 - classification.error
accuracy
## Presition and reacll
## Impot Library
library(caret)
#create a confution matrix
conf_martix <- confusionMatrix(test.df$Approval, predict(logit.reg, test.df)
table(test.df$Approval, approvals)
classification.error <- mean(approvals != test.df$Approval)
classification.error
accuracy <- 1 - classification.error
accuracy
## Presition and reacll
## Impot Library
library(caret)
#create a confution matrix
conf_martix <- confusionMatrix(test.df$Approval, predict(logit.reg, test.df,type="response" )
table(test.df$Approval, approvals)
classification.error <- mean(approvals != test.df$Approval)
classification.error
accuracy <- 1 - classification.error
accuracy
## Presition and reacll
## Impot Library
library(caret)
#create a confution matrix
conf_martix <- confusionMatrix(test.df$Approval, predict(logit.reg, test.df,type="response"))
table(test.df$Approval, approvals)
classification.error <- mean(approvals != test.df$Approval)
classification.error
accuracy <- 1 - classification.error
accuracy
## Presition and reacll
## Impot Library
library(caret)
#create a confution matrix
conf_martix <- confustionMatrix(test.df$Approval)
table(test.df$Approval, approvals)
classification.error <- mean(approvals != test.df$Approval)
classification.error
accuracy <- 1 - classification.error
accuracy
## Presition and reacll
## Impot Library
library(caret)
#create a confution matrix
conf_martix <- confusionMatrix(test.df$Approval)
table(test.df$Approval, approvals)
classification.error <- mean(approvals != test.df$Approval)
classification.error
accuracy <- 1 - classification.error
accuracy
## Presition and reacll
## Impot Library
library(caret)
#create a confution matrix
conf_martix <- confusionMatrix(test.df$Approval, logit.reg.prob.df)
table(test.df$Approval, approvals)
classification.error <- mean(approvals != test.df$Approval)
classification.error
accuracy <- 1 - classification.error
accuracy
## Presition and reacll
## Impot Library
library(caret)
#create a confution matrix
conf_martix <- confusionMatrix(test.df$Approval,logit.reg.prob.df)
table(test.df$Approval, approvals)
classification.error <- mean(approvals != test.df$Approval)
classification.error
accuracy <- 1 - classification.error
accuracy
## Presition and reacll
## Impot Library
library(caret)
#create a confution matrix
conf_martix <- confusionMatrix(test.df$Approval, logit.reg.prob.df)
table(test.df$Approval, approvals)
classification.error <- mean(approvals != test.df$Approval)
classification.error
accuracy <- 1 - classification.error
accuracy
## Presition and reacll
## Impot Library
library(caret)
#create a confution matrix
conf_martix <- confusionMatrix(test.df$Approval, approvals)
table(test.df$Approval, approvals)
classification.error <- mean(approvals != test.df$Approval)
classification.error
accuracy <- 1 - classification.error
accuracy
## Presition and reacll
## Impot Library
library(caret)
#create a confution matrix
confusionMatrix(test.df$Approval, approvals)
knitr::opts_chunk$set(echo = TRUE)
loan.df <- read.csv("LoanApproval.csv")
head(loan.df)
# Check for missing values
sum(is.na(loan.df))
summary(loan.df)
set.seed(2)
# Split the data 80:20
train.sample <- sample(c(1:dim(loan.df)[1]), dim(loan.df)[1]*0.8)
train.df <- loan.df[train.sample,]
test.df <- loan.df[-train.sample,]
logit.reg <- glm(Approval ~ ., train.df, family="binomial")
options(scipen = 999)
summary(logit.reg)
logit.reg.pred <- predict(logit.reg, test.df[,-7], type="response")
# Compare first 20 actual vs predicted values
data.frame(actual = test.df$Approval[1:20], predicted = logit.reg.pred[1:20])
library(gains)
gain <- gains(test.df$Approval, logit.reg.pred, groups=length(logit.reg.pred))
# plot Lift chart
plot(c(0, gain$cume.pct.of.total*sum(test.df$Approval))~c(0,gain$cume.obs), xlab="# records", ylab = "Cumulative Gain", main="Gain and Lift Chart", type="l", col="blue")
lines(c(0, sum(test.df$Approval))~c(0, dim(test.df)[1]), col="red",
legend("topleft",c("With prediction","No Prediction"),fill=c("blue","red")))
library(car)
vif(logit.reg)
theFormula = Approval ~ Term + Income + FICO
logit.reg <- glm(formula = theFormula, train.df, family="binomial")
options(scipen = 999)
summary(logit.reg)
logit.reg.pred <- predict(logit.reg, test.df[,-7], type="response")
# Compare first 20 actual vs predicted values
data.frame(actual = test.df$Approval[1:20], predicted = logit.reg.pred[1:20])
library(gains)
gain <- gains(test.df$Approval, logit.reg.pred, groups=length(logit.reg.pred))
# plot Lift chart
plot(c(0, gain$cume.pct.of.total*sum(test.df$Approval))~c(0,gain$cume.obs), xlab="# records", ylab = "Cumulative Gain", main="Gain and Lift Chart", type="l", col="blue")
lines(c(0, sum(test.df$Approval))~c(0, dim(test.df)[1]), col="red",
legend("topleft",c("With prediction","No Prediction"),fill=c("blue","red")))
library(car)
vif(logit.reg)
logit.reg.prob <- predict(logit.reg, test.df, type="response" )
logit.reg.prob.df <- data.frame(logit.reg.prob)
# Extract only decisions made with a probability higher than 80%
approvals <- ifelse(logit.reg.prob.df > 0.8, 1, 0)
head(approvals, 20)
table(test.df$Approval, approvals)
classification.error <- mean(approvals != test.df$Approval)
classification.error
accuracy <- 1 - classification.error
accuracy
## Presition and reacll
## Impot Library
library(caret)
#create a confution matrix
confusionMatrix(test.df$Approval, approvals)
table(test.df$Approval, approvals)
classification.error <- mean(approvals != test.df$Approval)
classification.error
accuracy <- 1 - classification.error
accuracy
## Presition and reacll
## Impot Library
library(caret)
#create a confution matrix
conf_matrix <- confusionMatrix(test.df$Approval, approvals)
table(test.df$Approval, approvals)
classification.error <- mean(approvals != test.df$Approval)
classification.error
accuracy <- 1 - classification.error
accuracy
## Presition and reacll
## Impot Library
library(caret)
test.df$Approval <- factor(test.df$Approval)
approvals <- factor(approvals)
#create a confution matrix
conf_matrix <- confusionMatrix(test.df$Approval, approvals)
table(test.df$Approval, approvals)
classification.error <- mean(approvals != test.df$Approval)
classification.error
accuracy <- 1 - classification.error
accuracy
## Presition and reacll
## Impot Library
library(caret)
test.df$Approval <- factor(test.df$Approval)
approvals <- factor(approvals)
#create a confution matrix
conf_matrix <- confusionMatrix(test.df$Approval, approvals)
conf_matrix_df <- as.data.frame.table(conf_matrix)
table(test.df$Approval, approvals)
classification.error <- mean(approvals != test.df$Approval)
classification.error
accuracy <- 1 - classification.error
accuracy
## Presition and reacll
## Impot Library
library(caret)
test.df$Approval <- factor(test.df$Approval)
approvals <- factor(approvals)
#create a confution matrix
conf_matrix <- confusionMatrix(test.df$Approval, approvals)
conf_matrix_df <- as.data.frame.table(conf_matrix)
table(test.df$Approval, approvals)
classification.error <- mean(approvals != test.df$Approval)
classification.error
accuracy <- 1 - classification.error
accuracy
## Presition and reacll
## Impot Library
library(caret)
test.df$Approval <- factor(test.df$Approval)
approvals <- factor(approvals)
#create a confution matrix
conf_matrix <- confusionMatrix(test.df$Approval, approvals)
conf_matrix_df <- melt(conf_matrix)
table(test.df$Approval, approvals)
classification.error <- mean(approvals != test.df$Approval)
classification.error
accuracy <- 1 - classification.error
accuracy
## Presition and reacll
## Impot Library
library(caret)
test.df$Approval <- factor(test.df$Approval)
approvals <- factor(approvals)
#create a confution matrix
conf_matrix <- confusionMatrix(test.df$Approval, approvals)
conf_matrix_df <- as.data.frame.table(conf_matrix)
table(test.df$Approval, approvals)
classification.error <- mean(approvals != test.df$Approval)
classification.error
accuracy <- 1 - classification.error
accuracy
## Presition and reacll
## Impot Library
library(caret)
test.df$Approval <- factor(test.df$Approval)
approvals <- factor(approvals)
#create a confution matrix
conf_matrix <- confusionMatrix(test.df$Approval, approvals)
library(gridExtra)
install.packages("gridExtra")
table(test.df$Approval, approvals)
classification.error <- mean(approvals != test.df$Approval)
classification.error
accuracy <- 1 - classification.error
accuracy
## Presition and reacll
## Impot Library
library(caret)
test.df$Approval <- factor(test.df$Approval)
approvals <- factor(approvals)
#create a confution matrix
conf_matrix <- confusionMatrix(test.df$Approval, approvals)
library(gridExtra)
grid.arrange(tableGrob(conf_matrix))
conf_matrix_df <- as.data.frame.table(conf_matrix)
table(test.df$Approval, approvals)
classification.error <- mean(approvals != test.df$Approval)
classification.error
accuracy <- 1 - classification.error
accuracy
## Presition and reacll
## Impot Library
library(caret)
test.df$Approval <- factor(test.df$Approval)
approvals <- factor(approvals)
#create a confution matrix
conf_matrix <- confusionMatrix(test.df$Approval, approvals)
library(gridExtra)
grid.arrange(tableGrob(conf_matrix))
# Rename the columns
colnames(conf_matrix_df) <- c("predicted_no", "predicted_yes")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
# install and load the e1071 package
install.packages("e1071")
library(e1071)
# install and load the e1071 package
install.packages("e1071")
library(e1071)
install.packages("e1071")
knitr::opts_chunk$set(echo = TRUE)
# install and load the e1071 package
install.packages("e1071")
library(e1071)
install.packages("e1071")
knitr::opts_chunk$set(echo = TRUE)
# install and load the e1071 package
install.packages("e1071")
library(e1071)
install.packages("e1071")
install.packages("e1071")
knitr::opts_chunk$set(echo = TRUE)
# install and load the e1071 package
install.packages("e1071")
library(e1071)
# create a sample dataset
data(iris)
# split the data into a training set and a test set
train_indices <- sample(1:nrow(iris), 0.8*nrow(iris))
train_data <- iris[train_indices,]
test_data <- iris[-train_indices,]
# train the model on the training data
model <- naiveBayes(Species ~ ., data = train_data)
# make predictions on the test data
predictions <- predict(model, test_data)
print(predictions)
# evaluate the accuracy of the model
mean(predictions == test_data$Species)
install.packages("e1071")
knitr::opts_chunk$set(echo = TRUE)
# install and load the e1071 package
install.packages("e1071")
# install and load the e1071 package
install.packages("e1071")
library(e1071)
# create a sample dataset
data(iris)
# split the data into a training set and a test set
train_indices <- sample(1:nrow(iris), 0.8*nrow(iris))
train_data <- iris[train_indices,]
test_data <- iris[-train_indices,]
# train the model on the training data
model <- naiveBayes(Species ~ ., data = train_data)
# make predictions on the test data
predictions <- predict(model, test_data)
print(predictions)
# evaluate the accuracy of the model
mean(predictions == test_data$Species)
